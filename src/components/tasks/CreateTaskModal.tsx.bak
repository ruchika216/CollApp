import React, { useEffect, useMemo, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  Platform,
  ScrollView,
  ActivityIndicator,
  Alert,
  Modal,
} from 'react-native';
import { useTheme } from '../../theme/useTheme';
import firestoreService from '../../firebase/firestoreService';
import { Task, User } from '../../types';
import Icon from '../common/Icon';
import { createTask } from '../../firebase/taskServices';
import { useAppSelector } from '../../store/hooks';

interface Props {
  visible: boolean;
  onClose: () => void;
}

const CreateTaskModal: React.FC<Props> = ({ visible, onClose }) => {
  const { colors } = useTheme();
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [priority, setPriority] = useState<'High' | 'Medium' | 'Low'>('Medium');
  const [status, setStatus] = useState<
    'To Do' | 'In Progress' | 'Review' | 'Testing' | 'Completed'
  >('To Do');
  const [dueDate, setDueDate] = useState<string>('');
  const [assignees, setAssignees] = useState<string[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  
  const user = useAppSelector(s => s.auth.user);

  // Load approved users when modal opens
  useEffect(() => {
    let mounted = true;
    
    const loadUsers = async () => {
      setLoading(true);
      try {
        const list = await firestoreService.getApprovedUsers();
        if (mounted) setUsers(list);
      } catch (e) {
        console.error('Error loading users:', e);
      } finally {
        if (mounted) setLoading(false);
      }
    };
    
    loadUsers();
    
    return () => {
      mounted = false;
    };
  }, []);

  const toggleAssignee = (uid: string) => {
    setAssignees(prev =>
      prev.includes(uid) ? prev.filter(id => id !== uid) : [...prev, uid],
    );
  };

  const statusItems = useMemo(
    () => ['To Do', 'In Progress', 'Review', 'Testing', 'Completed'] as const,
    [],
  );

  const handleSave = async () => {
    if (!title.trim()) {
      Alert.alert('Error', 'Task title is required');
      return;
    }
    
    if (!user?.uid) {
      Alert.alert('Error', 'User not authenticated');
      return;
    }
    
    try {
      setSubmitting(true);
      
      await createTask({
        title: title.trim(),
        description: description.trim(),
        priority,
        status,
        dueDate: dueDate || undefined,
        assignedTo: assignees,
        createdBy: user.uid,
      });
      
      Alert.alert('Success', 'Task created successfully');
      setTitle('');
      setDescription('');
      setPriority('Medium');
      setStatus('To Do');
      setDueDate('');
      setAssignees([]);
      onClose();
    } catch (error) {
      console.error('Error creating task:', error);
      Alert.alert('Error', 'Failed to create task');
    } finally {
      setSubmitting(false);
    }
  };

  const getPriorityColor = (p: 'High' | 'Medium' | 'Low') => {
    switch (p) {
      case 'High':
        return colors.error;
      case 'Medium':
        return colors.warning;
      case 'Low':
        return colors.success;
      default:
        return colors.primary;
    }
  };

  const getStatusColor = (s: Task['status']) => {
    switch (s) {
      case 'To Do':
        return colors.pending;
      case 'In Progress':
        return colors.inProgress;
      case 'Review':
        return colors.review;
      case 'Testing':
        return colors.testing;
      case 'Completed':
        return colors.success;
      default:
        return colors.primary;
    }
  };

  return (
    <Modal
      visible={visible}
      transparent
      animationType="slide"
      onRequestClose={onClose}
    >
      <View style={styles.backdrop}>
        <View
          style={[
            styles.sheet,
            { backgroundColor: colors.card, borderColor: colors.border },
          ]}
          accessibilityViewIsModal
        >
          <View style={[styles.container, { backgroundColor: colors.background }]}>
            <View style={styles.header}>
              <TouchableOpacity 
                style={styles.closeButton} 
                onPress={onClose}
                hitSlop={{ top: 10, right: 10, bottom: 10, left: 10 }}
              >
                <Icon name="close" size={24} tintColor={colors.text} />
              </TouchableOpacity>
              <Text style={[styles.title, { color: colors.text }]}>Create New Task</Text>
              <View style={{ width: 24 }} />
            </View>

            <ScrollView style={styles.content}>
              <Text style={[styles.label, { color: colors.textSecondary }]}>Task Title *</Text>
              <TextInput
                placeholder="Enter task title"
                placeholderTextColor={colors.textSecondary}
                value={title}
                onChangeText={setTitle}
                style={[
                  styles.input,
                  { color: colors.text, backgroundColor: colors.cardAlt, borderColor: colors.border },
                ]}
              />
              
              <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Description</Text>
              <TextInput
                placeholder="Enter task description"
                placeholderTextColor={colors.textSecondary}
                value={description}
                onChangeText={setDescription}
                multiline
                style={[
                  styles.input,
                  styles.textArea,
                  { color: colors.text, backgroundColor: colors.cardAlt, borderColor: colors.border },
                ]}
              />
              
              <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Priority</Text>
              <View style={styles.chipRow}>
                {(['High', 'Medium', 'Low'] as const).map((p) => (
                  <TouchableOpacity
                    key={p}
                    onPress={() => setPriority(p)}
                    style={[
                      styles.chip,
                      { 
                        backgroundColor: priority === p 
                          ? getPriorityColor(p)
                          : `${getPriorityColor(p)}20` 
                      },
                    ]}
                  >
                    <Text
                      style={[
                        styles.chipText, 
                        { color: priority === p ? '#fff' : getPriorityColor(p) }
                      ]}
                    >
                      {p}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
              
              <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Status</Text>
              <ScrollView 
                horizontal 
                showsHorizontalScrollIndicator={false}
                contentContainerStyle={styles.chipRow}
              >
                {statusItems.map((s) => (
                  <TouchableOpacity
                    key={s}
                    onPress={() => setStatus(s)}
                    style={[
                      styles.chip,
                      { 
                        backgroundColor: status === s 
                          ? getStatusColor(s)
                          : `${getStatusColor(s)}20` 
                      },
                    ]}
                  >
                    <Text
                      style={[
                        styles.chipText, 
                        { color: status === s ? '#fff' : getStatusColor(s) }
                      ]}
                    >
                      {s}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
              
              <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Due Date</Text>
              <TextInput
                placeholder="YYYY-MM-DD"
                placeholderTextColor={colors.textSecondary}
                value={dueDate}
                onChangeText={setDueDate}
                style={[
                  styles.input,
                  { color: colors.text, backgroundColor: colors.cardAlt, borderColor: colors.border },
                ]}
              />
              
              <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Assign To</Text>
              {loading ? (
                <ActivityIndicator color={colors.primary} style={styles.loader} />
              ) : users.length > 0 ? (
                <View style={styles.userList}>
                  {users.map((u) => (
                    <TouchableOpacity
                      key={u.uid}
                      style={[
                        styles.userItem,
                        { 
                          backgroundColor: assignees.includes(u.uid) 
                            ? colors.primary + '20'
                            : colors.cardAlt 
                        },
                        assignees.includes(u.uid) && { borderColor: colors.primary }
                      ]}
                      onPress={() => toggleAssignee(u.uid)}
                    >
                      <View style={styles.userAvatar}>
                        <Text style={styles.userInitial}>
                          {(u.displayName || u.email || 'U').charAt(0).toUpperCase()}
                        </Text>
                      </View>
                      <Text style={[styles.userName, { color: colors.text }]}>
                        {u.displayName || u.email || 'User'}
                      </Text>
                      {assignees.includes(u.uid) && (
                        <Icon name="check-circle" size={18} tintColor={colors.primary} />
                      )}
                    </TouchableOpacity>
                  ))}
                </View>
              ) : (
                <Text style={[styles.emptyText, { color: colors.textSecondary }]}>
                  No users available to assign
                </Text>
              )}
            </ScrollView>

            <View style={[styles.footer, { borderTopColor: colors.border }]}>
              <TouchableOpacity
                style={[styles.cancelButton, { backgroundColor: colors.cardAlt }]}
                onPress={onClose}
                disabled={submitting}
              >
                <Text style={[styles.cancelButtonText, { color: colors.text }]}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.createButton, { backgroundColor: colors.primary }]}
                onPress={handleSave}
                disabled={submitting || !title.trim()}
              >
                {submitting ? (
                  <ActivityIndicator size="small" color="#fff" />
                ) : (
                  <Text style={styles.createButtonText}>Create Task</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  backdrop: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  sheet: {
    width: '100%',
    height: '100%',
    borderRadius: 12,
    borderWidth: 1,
    overflow: 'hidden',
  },
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingTop: Platform.OS === 'ios' ? 48 : 16,
    paddingBottom: 16,
  },
  closeButton: {
    width: 24,
    height: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 8,
  },
  input: {
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 14,
    borderWidth: 1,
  },
  textArea: {
    minHeight: 100,
    textAlignVertical: 'top',
  },
  chipRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  chip: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 16,
  },
  chipText: {
    fontSize: 12,
    fontWeight: '600',
  },
  loader: {
    marginVertical: 16,
  },
  userList: {
    gap: 8,
  },
  userItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'transparent',
  },
  userAvatar: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#4F46E5',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 10,
  },
  userInitial: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 14,
  },
  userName: {
    flex: 1,
    fontSize: 14,
  },
  emptyText: {
    textAlign: 'center',
    fontStyle: 'italic',
    marginVertical: 16,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 16,
    borderTopWidth: 1,
    gap: 12,
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  cancelButtonText: {
    fontWeight: '600',
    fontSize: 14,
  },
  createButton: {
    flex: 2,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  createButtonText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 14,
  },
});

export default CreateTaskModal;
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  Platform,
  ScrollView,
  ActivityIndicator,
  Alert,
} from 'react-native';
import { useTheme } from '../../theme/useTheme';
import firestoreService from '../../firebase/firestoreService';
import { Task, User } from '../../types';
import Icon from '../common/Icon';
import { createTask } from '../../firebase/taskServices';
import { useAppSelector } from '../../store/hooks';

interface Props {
  onClose: () => void;
}

const CreateTaskModal: React.FC<Props> = ({ onClose }) => {
  const { colors } = useTheme();
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [priority, setPriority] = useState<'High' | 'Medium' | 'Low'>('Medium');
  const [status, setStatus] = useState<
    'To Do' | 'In Progress' | 'Review' | 'Testing' | 'Completed'
  >('To Do');
  const [dueDate, setDueDate] = useState<string>('');
  const [assignees, setAssignees] = useState<string[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  
  const user = useAppSelector(s => s.auth.user);

  // Load approved users when modal opens
  useEffect(() => {
    let mounted = true;
    
    const loadUsers = async () => {
      setLoading(true);
      try {
        const list = await firestoreService.getApprovedUsers();
        if (mounted) setUsers(list);
      } catch (e) {
        console.error('Error loading users:', e);
      } finally {
        if (mounted) setLoading(false);
      }
    };
    
    loadUsers();
    
    return () => {
      mounted = false;
    };
  }, []);

  const toggleAssignee = (uid: string) => {
    setAssignees(prev =>
      prev.includes(uid) ? prev.filter(id => id !== uid) : [...prev, uid],
    );
  };

  const statusItems = useMemo(
    () => ['To Do', 'In Progress', 'Review', 'Testing', 'Completed'] as const,
    [],
  );

  const handleSave = async () => {
    if (!title.trim()) {
      Alert.alert('Error', 'Task title is required');
      return;
    }
    
    if (!user?.uid) {
      Alert.alert('Error', 'User not authenticated');
      return;
    }
    
    try {
      setSubmitting(true);
      
      await createTask({
        title: title.trim(),
        description: description.trim(),
        priority,
        status,
        dueDate: dueDate || undefined,
        assignedTo: assignees,
        createdBy: user.uid,
      });
      
      Alert.alert('Success', 'Task created successfully');
      setTitle('');
      setDescription('');
      setPriority('Medium');
      setStatus('To Do');
      setDueDate('');
      setAssignees([]);
      onClose();
    } catch (error) {
      console.error('Error creating task:', error);
      Alert.alert('Error', 'Failed to create task');
    } finally {
      setSubmitting(false);
    }
  };

  const getPriorityColor = (p: 'High' | 'Medium' | 'Low') => {
    switch (p) {
      case 'High':
        return colors.error;
      case 'Medium':
        return colors.warning;
      case 'Low':
        return colors.success;
      default:
        return colors.primary;
    }
  };

  const getStatusColor = (s: Task['status']) => {
    switch (s) {
      case 'To Do':
        return colors.pending;
      case 'In Progress':
        return colors.inProgress;
      case 'Review':
        return colors.review;
      case 'Testing':
        return colors.testing;
      case 'Completed':
        return colors.success;
      default:
        return colors.primary;
    }
  };

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.closeButton} 
          onPress={onClose}
          hitSlop={{ top: 10, right: 10, bottom: 10, left: 10 }}
        >
          <Icon name="close" size={24} tintColor={colors.text} />
        </TouchableOpacity>
        <Text style={[styles.title, { color: colors.text }]}>Create New Task</Text>
        <View style={{ width: 24 }} />
      </View>

      <ScrollView style={styles.content}>
        <Text style={[styles.label, { color: colors.textSecondary }]}>Task Title *</Text>
        <TextInput
          placeholder="Enter task title"
          placeholderTextColor={colors.textSecondary}
          value={title}
          onChangeText={setTitle}
          style={[
            styles.input,
            { color: colors.text, backgroundColor: colors.cardAlt, borderColor: colors.border },
          ]}
        />
        
        <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Description</Text>
        <TextInput
          placeholder="Enter task description"
          placeholderTextColor={colors.textSecondary}
          value={description}
          onChangeText={setDescription}
          multiline
          style={[
            styles.input,
            styles.textArea,
            { color: colors.text, backgroundColor: colors.cardAlt, borderColor: colors.border },
          ]}
        />
        
        <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Priority</Text>
        <View style={styles.chipRow}>
          {(['High', 'Medium', 'Low'] as const).map((p) => (
            <TouchableOpacity
              key={p}
              onPress={() => setPriority(p)}
              style={[
                styles.chip,
                { 
                  backgroundColor: priority === p 
                    ? getPriorityColor(p)
                    : `${getPriorityColor(p)}20` 
                },
              ]}
            >
              <Text
                style={[
                  styles.chipText, 
                  { color: priority === p ? '#fff' : getPriorityColor(p) }
                ]}
              >
                {p}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
        
        <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Status</Text>
        <ScrollView 
          horizontal 
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.chipRow}
        >
          {statusItems.map((s) => (
            <TouchableOpacity
              key={s}
              onPress={() => setStatus(s)}
              style={[
                styles.chip,
                { 
                  backgroundColor: status === s 
                    ? getStatusColor(s)
                    : `${getStatusColor(s)}20` 
                },
              ]}
            >
              <Text
                style={[
                  styles.chipText, 
                  { color: status === s ? '#fff' : getStatusColor(s) }
                ]}
              >
                {s}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
        
        <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Due Date</Text>
        <TextInput
          placeholder="YYYY-MM-DD"
          placeholderTextColor={colors.textSecondary}
          value={dueDate}
          onChangeText={setDueDate}
          style={[
            styles.input,
            { color: colors.text, backgroundColor: colors.cardAlt, borderColor: colors.border },
          ]}
        />
        
        <Text style={[styles.label, { color: colors.textSecondary, marginTop: 16 }]}>Assign To</Text>
        {loading ? (
          <ActivityIndicator color={colors.primary} style={styles.loader} />
        ) : users.length > 0 ? (
          <View style={styles.userList}>
            {users.map((u) => (
              <TouchableOpacity
                key={u.uid}
                style={[
                  styles.userItem,
                  { 
                    backgroundColor: assignees.includes(u.uid) 
                      ? colors.primary + '20'
                      : colors.cardAlt 
                  },
                  assignees.includes(u.uid) && { borderColor: colors.primary }
                ]}
                onPress={() => toggleAssignee(u.uid)}
              >
                <View style={styles.userAvatar}>
                  <Text style={styles.userInitial}>
                    {(u.displayName || u.email || 'U').charAt(0).toUpperCase()}
                  </Text>
                </View>
                <Text style={[styles.userName, { color: colors.text }]}>
                  {u.displayName || u.email || 'User'}
                </Text>
                {assignees.includes(u.uid) && (
                  <Icon name="check-circle" size={18} tintColor={colors.primary} />
                )}
              </TouchableOpacity>
            ))}
          </View>
        ) : (
          <Text style={[styles.emptyText, { color: colors.textSecondary }]}>
            No users available to assign
          </Text>
        )}
      </ScrollView>

      <View style={[styles.footer, { borderTopColor: colors.border }]}>
        <TouchableOpacity
          style={[styles.cancelButton, { backgroundColor: colors.cardAlt }]}
          onPress={onClose}
          disabled={submitting}
        >
          <Text style={[styles.cancelButtonText, { color: colors.text }]}>Cancel</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.createButton, { backgroundColor: colors.primary }]}
          onPress={handleSave}
          disabled={submitting || !title.trim()}
        >
          {submitting ? (
            <ActivityIndicator size="small" color="#fff" />
          ) : (
            <Text style={styles.createButtonText}>Create Task</Text>
          )}
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingTop: Platform.OS === 'ios' ? 48 : 16,
    paddingBottom: 16,
  },
  closeButton: {
    width: 24,
    height: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 8,
  },
  input: {
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 14,
    borderWidth: 1,
  },
  textArea: {
    minHeight: 100,
    textAlignVertical: 'top',
  },
  chipRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  chip: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 16,
  },
  chipText: {
    fontSize: 12,
    fontWeight: '600',
  },
  loader: {
    marginVertical: 16,
  },
  userList: {
    gap: 8,
  },
  userItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'transparent',
  },
  userAvatar: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#4F46E5',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 10,
  },
  userInitial: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 14,
  },
  userName: {
    flex: 1,
    fontSize: 14,
  },
  emptyText: {
    textAlign: 'center',
    fontStyle: 'italic',
    marginVertical: 16,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 16,
    borderTopWidth: 1,
    gap: 12,
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  cancelButtonText: {
    fontWeight: '600',
    fontSize: 14,
  },
  createButton: {
    flex: 2,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  createButtonText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 14,
  },
});

export default CreateTaskModal;
            styles.sheet,
            { backgroundColor: colors.card, borderColor: colors.border },
          ]}
          accessibilityViewIsModal
        >
          <Text style={[styles.title, { color: colors.text }]}>
            Create Task
          </Text>
          <TextInput
            placeholder="Title"
            placeholderTextColor={colors.textSecondary}
            value={title}
            onChangeText={setTitle}
            style={[
              styles.input,
              { color: colors.text, borderColor: colors.border },
            ]}
          />
          <TextInput
            placeholder="Description"
            placeholderTextColor={colors.textSecondary}
            value={description}
            onChangeText={setDescription}
            multiline
            style={[
              styles.input,
              styles.textArea,
              { color: colors.text, borderColor: colors.border },
            ]}
          />
          {/* Priority */}
          <View style={styles.row}>
            {(['High', 'Medium', 'Low'] as const).map(p => (
              <TouchableOpacity
                key={p}
                onPress={() => setPriority(p)}
                style={[
                  styles.chip,
                  p === priority ? dyn.chipActive : dyn.chipInactive,
                ]}
                accessibilityRole="button"
                accessibilityState={{ selected: p === priority }}
              >
                <Text
                  style={p === priority ? dyn.activeText : dyn.inactiveText}
                >
                  {p}
                </Text>
              </TouchableOpacity>
            ))}
          </View>

          {/* Status */}
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.row}
            style={styles.topGap}
          >
            {statusItems.map(s => (
              <TouchableOpacity
                key={s}
                onPress={() => setStatus(s)}
                style={[
                  styles.chip,
                  s === status ? dyn.chipActive : dyn.chipInactive,
                ]}
                accessibilityRole="button"
                accessibilityState={{ selected: s === status }}
              >
                <Text style={s === status ? dyn.activeText : dyn.inactiveText}>
                  {s}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>

          {/* Due date */}
          <TextInput
            placeholder="Due date (YYYY-MM-DD)"
            placeholderTextColor={colors.textSecondary}
            value={dueDate}
            onChangeText={setDueDate}
            style={[
              styles.input,
              { color: colors.text, borderColor: colors.border },
            ]}
          />

          {/* Assignees */}
          <Text style={[styles.sectionLabel, { color: colors.textSecondary }]}>
            Assign to
          </Text>
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.assignees}
          >
            {users.map(u => {
              const active = assignees.includes(u.uid);
              return (
                <TouchableOpacity
                  key={u.uid}
                  onPress={() => toggleAssignee(u.uid)}
                  style={[
                    styles.assigneeChip,
                    active ? dyn.assigneeActive : dyn.assigneeInactive,
                  ]}
                  accessibilityRole="button"
                  accessibilityState={{ selected: active }}
                >
                  <Text style={active ? dyn.activeText : dyn.inactiveText}>
                    {u.name || u.displayName || u.email || 'User'}
                  </Text>
                </TouchableOpacity>
              );
            })}
          </ScrollView>
          <View style={styles.footer}>
            <TouchableOpacity
              onPress={onClose}
              style={[styles.btn, styles.btnOutline, dyn.btnOutlineBorder]}
            >
              <Text style={dyn.btnOutlineText}>Cancel</Text>
            </TouchableOpacity>
            <TouchableOpacity
              onPress={handleSave}
              style={[styles.btn, dyn.btnPrimaryBg]}
            >
              <Text style={dyn.btnPrimaryText}>{submitLabel}</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  backdrop: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.25)',
    justifyContent: 'flex-end',
  },
  sheet: {
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    padding: 16,
    borderWidth: 1,
  },
  title: { fontSize: 18, fontWeight: '700', marginBottom: 12 },
  input: {
    borderWidth: 1,
    borderRadius: 10,
    padding: Platform.OS === 'ios' ? 12 : 10,
    marginBottom: 10,
  },
  textArea: { minHeight: 80, textAlignVertical: 'top' },
  row: { flexDirection: 'row', gap: 8, marginTop: 6 },
  chip: {
    borderWidth: 1.5,
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 12,
  },
  topGap: { marginTop: 8 },
  sectionLabel: {
    marginTop: 8,
    marginBottom: 4,
    fontSize: 12,
    fontWeight: '700',
  },
  assignees: { flexDirection: 'row', gap: 8, paddingVertical: 2 },
  assigneeChip: {
    borderWidth: 1,
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 12,
    marginRight: 8,
  },
  footer: {
    marginTop: 14,
    flexDirection: 'row',
    gap: 12,
  },
  btn: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    alignItems: 'center',
    borderWidth: 1,
  },
  btnOutline: {
    backgroundColor: 'transparent',
  },
});

// Build dynamic styles from theme colors without inline style objects in JSX
function makeDynamicStyles(colors: any) {
  return StyleSheet.create({
    chipActive: { borderColor: colors.primary },
    chipInactive: { borderColor: colors.border },
    activeText: { color: colors.primary, fontWeight: '700' },
    inactiveText: { color: colors.text },
    assigneeActive: {
      borderColor: colors.primary,
      backgroundColor: (colors.primary + '20') as string,
    },
    assigneeInactive: {
      borderColor: colors.border,
      backgroundColor: 'transparent',
    },
    btnOutlineBorder: { borderColor: colors.border },
    btnOutlineText: { color: colors.text, fontWeight: '700' },
    btnPrimaryBg: {
      backgroundColor: colors.primary,
      borderColor: colors.primary,
    },
    btnPrimaryText: {
      color: (colors as any).textOnPrimary || '#fff',
      fontWeight: '700',
    },
  });
}

export default CreateTaskModal;
